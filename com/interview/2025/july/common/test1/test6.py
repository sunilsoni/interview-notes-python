#!/usr/bin/env python3
"""
100% ALL PASSING WORKING
Restore Minimum Server Configuration

Given a corrupted configuration string config and integers x, y,
reconstruct the original final configuration string (digits 0–9)
with the minimum possible decimal value from which config can be obtained
by deleting some digits. Return "-1" if impossible.

### Example 1:
Input:
    config = "324"
    x = 2
    y = 3
Output:
    36924

### Example 2:
Input:
    config = "521"
    x = 5
    y = 5
Output:
    -1
"""

"""### 🧩 Problem: **Restore Minimum Server Configuration**

A team of software developers at Amazon is detecting configuration anomalies in a server. Some recorded configurations—represented by strings of digits—have missing digits due to data corruption.

Each configuration string (`config`) consists of digits `0–9`, generated by a process using two parameters: `x` and `y`. The generation process works like this:

1. Start with a **current value** `cur = 0`.
2. Repeatedly add either `x` or `y` to `cur`.
3. After each addition, take `cur % 10` (unit digit of `cur`) and append it to the result string.

This continues until the configuration is formed.

However, due to corruption, some digits are missing from the final configuration string. Your job is to **restore the minimum possible original configuration string** from which `config` could have been derived by deleting some digits (not rearranging). If it's **not possible**, return `"-1"`.

---

### 🧾 Function Signature:

```python
def missingDigits(config: str, x: int, y: int) -> str:
```

---

### ✅ Input:

* `config`: a string (2 ≤ len(config) ≤ 2×10⁵) representing the corrupted configuration string.
* `x`: integer (1 ≤ x ≤ 9)
* `y`: integer (1 ≤ y ≤ 9)

---

### 🔁 Output:

* Return the **minimum decimal number** (as a string) that can **generate** the given `config` by **removing some digits**.
* If no valid configuration exists, return **"-1"**.

---

### 📥 Input Format (Custom Testing):

```
Line 1: string config
Line 2: integer x
Line 3: integer y
```

---

### 💡 Example 1:

**Input:**

```
config = "324"
x = 2
y = 3
```

**Output:**

```
36924
```

**Explanation:**

We can generate the full config `36924` as:

* 0 + y = 3 → `3`
* 3 + x = 5 → `5` → `6`
* 6 + y = 9 → `9`
* 9 + x = 11 → `1`
* 11 + y = 14 → `4`
  Final = `36924`, and `324` can be formed by deleting digits → ✅

---

### 💡 Example 2:

**Input:**

```
config = "521"
x = 5
y = 5
```

**Output:**

```
-1
```

**Explanation:**

Only digits `0` and `5` are generated from this config. But `2` and `1` exist in `config`, so it's impossible. Hence `-1`.

---

### 🧠 Notes:

* The resulting string **must include** all characters of `config` in **order** (subsequence).
* Among all valid restored configurations, return the **smallest in decimal value**.

---

"""
from collections import deque
import time
import random

def missingDigits(config, x, y):
    # build neighbor map for unit‐digit transitions
    nbr = {}
    for u in range(10):
        a = (u + x) % 10
        b = (u + y) % 10
        nbr[u] = [a] if a == b else sorted([a, b])

    # precompute shortest non-zero paths between any two digits
    paths = [[None]*10 for _ in range(10)]
    for u in range(10):
        seen = [False]*10
        dq = deque()
        # seed with one‐step moves only
        for v in nbr[u]:
            if not seen[v]:
                seen[v] = True
                paths[u][v] = [v]
                dq.append(v)
        # BFS to find shortest paths (length ≥ 1)
        while dq:
            cur = dq.popleft()
            for v in nbr[cur]:
                if not seen[v]:
                    seen[v] = True
                    paths[u][v] = paths[u][cur] + [v]
                    dq.append(v)
        # note: paths[u][u] remains None unless there's a cycle back to u

    if not config:
        return ""

    # first character: from 0 to config[0]
    seq = []
    first = int(config[0])
    p0 = paths[0][first]
    if p0 is None:
        return "-1"
    seq.extend(p0)
    cur = first

    # the rest: from cur to each next config digit
    for ch in config[1:]:
        t = int(ch)
        p = paths[cur][t]
        if p is None:
            return "-1"
        seq.extend(p)
        cur = t

    # build final string
    return "".join(map(str, seq))

def main():
    # provided examples
    examples = [
        ("324", 2, 3),
        ("521", 5, 5),
        ("27", 2, 3),
    ]
    for i, (cfg, x, y) in enumerate(examples, 1):
        print(f"Example {i}: missingDigits({cfg!r}, {x}, {y}) -> {missingDigits(cfg, x, y)}")

    # the two large test cases
    test1 = (
        "1026045806748615155145324924148830613147874510283891283967521403080407570334453035096034316248737228225104075609916335007919493475134024375675514986067202165273370151859551081988810205163169520125831029825487765639639704542118393449629216781130192184678365351141357593846453926485017770341404321816391195013718787160151946531228758550092961360298849835411458010360377683531898613151826860259170631816193485389033498708090835815976151868484037509266671454100299829706756648367392314286928192651817872970116156921193730091243720926459347763112711348481322443784577521282562121608389942934461593317538585286010991910953031752982217904082245960663773727983359446806686368835558352155526476978973168548358047819304429149931454526129013218076859733631806296492399745295348846353435671344160806651409815005089265742805693819344544989086649376848738271136076438513243124654007640301473912625252694642415519370751772427823964400000058559828750355022492230316319397654312352749041584925314107029447065129956105449054003119822253202313327453108060803010883808580959657803374482113678540366008933611045730671713025424550084756681575424003794686255636530357286616577081233816149510791850416733182751433225950113875695961196643333589164089514728588967233140039609715928609378467021756334570126203387704329172842693154457320221323711199121738392415865073613682557918408368920355858577753664780258135832521301716803630806965226081680208394049544377912136873854097647745570773536516111864822538211207110002458113429690734164733952056663276446441203386517069127360196585993381664633592456207937850446630867325744656742079106310194141667589828297591357627069137197985560866523795707253713343439424744350481331108669973484989637202740991978053164660786836358248815699126146907418967151973422607755578010542861800731057647043353337842030249601568785993239740035071905681844319775559973269270211688441112331224470497823648377265052661121112261479117290842222078095504512283672619332581626133038042119805274673748163491875747619314788416976205116862960868008278210784616354388518273888816839390540074490751011374599572922703614704216709601400230584163919206327450937623654030642209549549069150966306380242835266551639408890849307410851606176290542891809596409326469726796080179109550365375990141408695714119002930419106001091135729312391712835381986471940447637252399685782994878461275883164579556099710356662216516818656776111137089346166776334093766494930757569858359338438065422284742894468116678648285338990822971155023943440526951720132779450881441425616538202272861598094946025338613880431776050133285378397724720813446763716512200848661252160194820939714837569102101615159432601164067744628552638366339564867267087831111059799017779035665802117896955892617963648595490972554269814330563255292654102021489433554879254679160112107280579545238263192399343458670844005147369326471616251734960153423685073255982638",
        1, 1
    )
    test2 = (

        5, 5
    )

    for label, (cfg, x, y) in [("Test1", test1), ("Test2", test2)]:
        t0 = time.time()
        out = missingDigits(cfg, x, y)
        dt = time.time() - t0
        print(f"{label}: x={x}, y={y}, len(config)={len(cfg)}, len(output)={len(out)}, time={dt:.3f}s")
        # if you know the expected result, you could compare here

if __name__ == "__main__":
    main()